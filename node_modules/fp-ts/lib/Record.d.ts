import { Applicative, Applicative1, Applicative2, Applicative2C, Applicative3, Applicative3C } from './Applicative';
import { Separated } from './Compactable';
import { Either } from './Either';
import { Foldable, Foldable1, Foldable2, Foldable3 } from './Foldable';
import { Predicate } from './function';
import { HKT, Type, Type2, Type3, URIS, URIS2, URIS3 } from './HKT';
import { Monoid } from './Monoid';
import { Option } from './Option';
import { Setoid } from './Setoid';
import { Unfoldable } from './Unfoldable';
/**
 * Calculate the number of key/value pairs in a dictionary
 * @function
 * @since 1.10.0
 */
export declare const size: <A>(d: {
    [key: string]: A;
}) => number;
/**
 * Test whether a dictionary is empty
 * @function
 * @since 1.10.0
 */
export declare const isEmpty: <A>(d: {
    [key: string]: A;
}) => boolean;
/**
 * @function
 * @since 1.10.0
 */
export declare const collect: <A, B>(d: {
    [key: string]: A;
}, f: (k: string, a: A) => B) => B[];
/**
 * @function
 * @since 1.10.0
 */
export declare const toArray: <A>(d: {
    [key: string]: A;
}) => [string, A][];
/**
 * Unfolds a dictionary into a list of key/value pairs
 * @function
 * @since 1.10.0
 */
export declare const toUnfoldable: <F>(unfoldable: Unfoldable<F>) => <A>(d: {
    [key: string]: A;
}) => HKT<F, [string, A]>;
/**
 * Insert or replace a key/value pair in a map
 * @function
 * @since 1.10.0
 */
export declare const insert: <A>(k: string, a: A, d: {
    [key: string]: A;
}) => {
    [key: string]: A;
};
/**
 * Delete a key and value from a map
 * @function
 * @since 1.10.0
 */
export declare const remove: <A>(k: string, d: {
    [key: string]: A;
}) => {
    [key: string]: A;
};
/**
 * Delete a key and value from a map, returning the value as well as the subsequent map
 * @function
 * @since 1.10.0
 */
export declare const pop: <A>(k: string, d: {
    [key: string]: A;
}) => Option<[A, {
    [key: string]: A;
}]>;
/**
 * Test whether one dictionary contains all of the keys and values contained in another dictionary
 * @function
 * @since 1.10.0
 */
export declare const isSubdictionary: <A>(S: Setoid<A>) => (d1: {
    [key: string]: A;
}, d2: {
    [key: string]: A;
}) => boolean;
/**
 * @function
 * @since 1.10.0
 */
export declare const getSetoid: <A>(S: Setoid<A>) => Setoid<{
    [key: string]: A;
}>;
/**
 * @function
 * @since 1.10.0
 */
export declare const getMonoid: <A>(S: import("./Semigroup").Semigroup<A>) => Monoid<{
    [key: string]: A;
}>;
/**
 * Lookup the value for a key in a dictionary
 * @since 1.10.0
 */
export declare const lookup: <A>(key: string, fa: {
    [key: string]: A;
}) => Option<A>;
/**
 * @since 1.10.0
 */
export declare const filter: <A>(fa: {
    [key: string]: A;
}, p: Predicate<A>) => {
    [key: string]: A;
};
/**
 * Create a dictionary from a foldable collection of key/value pairs, using the
 * specified function to combine values for duplicate keys.
 * @function
 * @since 1.10.0
 */
export declare function fromFoldable<F extends URIS3>(F: Foldable3<F>): <U, L, A>(ta: Type3<F, U, L, [string, A]>, f: (existing: A, a: A) => A) => {
    [key: string]: A;
};
export declare function fromFoldable<F extends URIS2>(F: Foldable2<F>): <L, A>(ta: Type2<F, L, [string, A]>, f: (existing: A, a: A) => A) => {
    [key: string]: A;
};
export declare function fromFoldable<F extends URIS>(F: Foldable1<F>): <A>(ta: Type<F, [string, A]>, f: (existing: A, a: A) => A) => {
    [key: string]: A;
};
export declare function fromFoldable<F>(F: Foldable<F>): <A>(ta: HKT<F, [string, A]>, f: (existing: A, a: A) => A) => {
    [key: string]: A;
};
/**
 * @constant
 * @since 1.10.0
 */
export declare const empty: Record<string, never>;
/**
 * @function
 * @since 1.10.0
 */
export declare const mapWithKey: <A, B>(fa: {
    [key: string]: A;
}, f: (k: string, a: A) => B) => {
    [key: string]: B;
};
/**
 * @function
 * @since 1.10.0
 */
export declare const map: <A, B>(fa: {
    [key: string]: A;
}, f: (a: A) => B) => {
    [key: string]: B;
};
/**
 * @function
 * @since 1.10.0
 */
export declare const reduce: <A, B>(fa: {
    [key: string]: A;
}, b: B, f: (b: B, a: A) => B) => B;
/**
 * @function
 * @since 1.10.0
 */
export declare const foldMap: <M>(M: Monoid<M>) => <A>(fa: {
    [key: string]: A;
}, f: (a: A) => M) => M;
/**
 * @function
 * @since 1.10.0
 */
export declare const foldr: <A, B>(fa: {
    [key: string]: A;
}, b: B, f: (a: A, b: B) => B) => B;
/**
 * Create a dictionary with one key/value pair
 * @function
 * @since 1.10.0
 */
export declare const singleton: <A>(k: string, a: A) => {
    [key: string]: A;
};
/**
 * @function
 * @since 1.10.0
 */
export declare function traverseWithKey<F extends URIS3>(F: Applicative3<F>): <U, L, A, B>(ta: {
    [key: string]: A;
}, f: (k: string, a: A) => Type3<F, U, L, B>) => Type3<F, U, L, {
    [key: string]: B;
}>;
export declare function traverseWithKey<F extends URIS2>(F: Applicative2<F>): <L, A, B>(ta: {
    [key: string]: A;
}, f: (k: string, a: A) => Type2<F, L, B>) => Type2<F, L, {
    [key: string]: B;
}>;
export declare function traverseWithKey<F extends URIS>(F: Applicative1<F>): <A, B>(ta: {
    [key: string]: A;
}, f: (k: string, a: A) => Type<F, B>) => Type<F, {
    [key: string]: B;
}>;
export declare function traverseWithKey<F>(F: Applicative<F>): <A, B>(ta: {
    [key: string]: A;
}, f: (k: string, a: A) => HKT<F, B>) => HKT<F, {
    [key: string]: B;
}>;
/**
 * @function
 * @since 1.10.0
 */
export declare function traverse<F extends URIS3>(F: Applicative3<F>): <U, L, A, B>(ta: {
    [key: string]: A;
}, f: (a: A) => Type3<F, U, L, B>) => Type3<F, U, L, {
    [key: string]: B;
}>;
export declare function traverse<F extends URIS3, U, L>(F: Applicative3C<F, U, L>): <A, B>(ta: {
    [key: string]: A;
}, f: (a: A) => Type3<F, U, L, B>) => Type3<F, U, L, {
    [key: string]: B;
}>;
export declare function traverse<F extends URIS2>(F: Applicative2<F>): <L, A, B>(ta: {
    [key: string]: A;
}, f: (a: A) => Type2<F, L, B>) => Type2<F, L, {
    [key: string]: B;
}>;
export declare function traverse<F extends URIS2, L>(F: Applicative2C<F, L>): <A, B>(ta: {
    [key: string]: A;
}, f: (a: A) => Type2<F, L, B>) => Type2<F, L, {
    [key: string]: B;
}>;
export declare function traverse<F extends URIS>(F: Applicative1<F>): <A, B>(ta: {
    [key: string]: A;
}, f: (a: A) => Type<F, B>) => Type<F, {
    [key: string]: B;
}>;
export declare function traverse<F>(F: Applicative<F>): <A, B>(ta: {
    [key: string]: A;
}, f: (a: A) => HKT<F, B>) => HKT<F, {
    [key: string]: B;
}>;
/**
 * @function
 * @since 1.10.0
 */
export declare function sequence<F extends URIS3>(F: Applicative3<F>): <U, L, A>(ta: {
    [key: string]: Type3<F, U, L, A>;
}) => Type3<F, U, L, {
    [key: string]: A;
}>;
export declare function sequence<F extends URIS3, U, L>(F: Applicative3C<F, U, L>): <A>(ta: {
    [key: string]: Type3<F, U, L, A>;
}) => Type3<F, U, L, {
    [key: string]: A;
}>;
export declare function sequence<F extends URIS2>(F: Applicative2<F>): <L, A>(ta: {
    [key: string]: Type2<F, L, A>;
}) => Type2<F, L, {
    [key: string]: A;
}>;
export declare function sequence<F extends URIS2, L>(F: Applicative2C<F, L>): <A>(ta: {
    [key: string]: Type2<F, L, A>;
}) => Type2<F, L, {
    [key: string]: A;
}>;
export declare function sequence<F extends URIS>(F: Applicative1<F>): <A>(ta: {
    [key: string]: Type<F, A>;
}) => Type<F, {
    [key: string]: A;
}>;
export declare function sequence<F>(F: Applicative<F>): <A>(ta: {
    [key: string]: HKT<F, A>;
}) => HKT<F, {
    [key: string]: A;
}>;
/**
 * @function
 * @since 1.10.0
 */
export declare const compact: <A>(fa: {
    [key: string]: Option<A>;
}) => {
    [key: string]: A;
};
/**
 * @function
 * @since 1.10.0
 */
export declare const partitionMap: <RL, RR, A>(fa: {
    [key: string]: A;
}, f: (a: A) => Either<RL, RR>) => Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>;
/**
 * @function
 * @since 1.10.0
 */
export declare const partition: <A>(fa: {
    [key: string]: A;
}, p: Predicate<A>) => Separated<{
    [key: string]: A;
}, {
    [key: string]: A;
}>;
/**
 * @function
 * @since 1.10.0
 */
export declare const separate: <RL, RR>(fa: {
    [key: string]: Either<RL, RR>;
}) => Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>;
/**
 * @function
 * @since 1.10.0
 */
export declare function wither<F extends URIS3>(F: Applicative3<F>): (<U, L, A, B>(wa: {
    [key: string]: A;
}, f: (a: A) => Type3<F, U, L, Option<B>>) => Type3<F, U, L, {
    [key: string]: B;
}>);
export declare function wither<F extends URIS3, U, L>(F: Applicative3C<F, U, L>): (<A, B>(wa: {
    [key: string]: A;
}, f: (a: A) => Type3<F, U, L, Option<B>>) => Type3<F, U, L, {
    [key: string]: B;
}>);
export declare function wither<F extends URIS2>(F: Applicative2<F>): (<L, A, B>(wa: {
    [key: string]: A;
}, f: (a: A) => Type2<F, L, Option<B>>) => Type2<F, L, {
    [key: string]: B;
}>);
export declare function wither<F extends URIS2, L>(F: Applicative2C<F, L>): (<A, B>(wa: {
    [key: string]: A;
}, f: (a: A) => Type2<F, L, Option<B>>) => Type2<F, L, {
    [key: string]: B;
}>);
export declare function wither<F extends URIS>(F: Applicative1<F>): (<A, B>(wa: {
    [key: string]: A;
}, f: (a: A) => Type<F, Option<B>>) => Type<F, {
    [key: string]: B;
}>);
export declare function wither<F>(F: Applicative<F>): (<A, B>(wa: {
    [key: string]: A;
}, f: (a: A) => HKT<F, Option<B>>) => HKT<F, {
    [key: string]: B;
}>);
/**
 * @function
 * @since 1.10.0
 */
export declare function wilt<F extends URIS3>(F: Applicative3<F>): (<U, L, RL, RR, A>(wa: {
    [key: string]: A;
}, f: (a: A) => Type3<F, U, L, Either<RL, RR>>) => Type3<F, U, L, Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>>);
export declare function wilt<F extends URIS3, U, L>(F: Applicative3C<F, U, L>): (<RL, RR, A>(wa: {
    [key: string]: A;
}, f: (a: A) => Type3<F, U, L, Either<RL, RR>>) => Type3<F, U, L, Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>>);
export declare function wilt<F extends URIS2>(F: Applicative2<F>): (<L, RL, RR, A>(wa: {
    [key: string]: A;
}, f: (a: A) => Type2<F, L, Either<RL, RR>>) => Type2<F, L, Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>>);
export declare function wilt<F extends URIS2, L>(F: Applicative2C<F, L>): (<RL, RR, A>(wa: {
    [key: string]: A;
}, f: (a: A) => Type2<F, L, Either<RL, RR>>) => Type2<F, L, Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>>);
export declare function wilt<F extends URIS>(F: Applicative1<F>): (<RL, RR, A>(wa: {
    [key: string]: A;
}, f: (a: A) => Type<F, Either<RL, RR>>) => Type<F, Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>>);
export declare function wilt<F>(F: Applicative<F>): (<RL, RR, A>(wa: {
    [key: string]: A;
}, f: (a: A) => HKT<F, Either<RL, RR>>) => HKT<F, Separated<{
    [key: string]: RL;
}, {
    [key: string]: RR;
}>>);
/**
 * @function
 * @since 1.10.0
 */
export declare const filterMap: <A, B>(fa: {
    [key: string]: A;
}, f: (a: A) => Option<B>) => {
    [key: string]: B;
};
